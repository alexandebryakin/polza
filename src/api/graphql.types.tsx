import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
const defaultOptions = {} as const;
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  ISO8601DateTime: string;
  JSON: any;
  Upload: File;
};

export type Attachment = {
  __typename?: 'Attachment';
  contentType: Maybe<Scalars['String']>;
  createdAt: Scalars['ISO8601DateTime'];
  documentableId: Maybe<Scalars['ID']>;
  documentableType: Maybe<Scalars['String']>;
  id: Scalars['Int'];
  updatedAt: Scalars['ISO8601DateTime'];
  url: Scalars['String'];
};

export type BusinessCard = {
  __typename?: 'BusinessCard';
  address: Maybe<Scalars['String']>;
  description: Maybe<Scalars['String']>;
  emails: Array<Email>;
  id: Scalars['ID'];
  phones: Array<Phone>;
  status: Maybe<PublicationStatusEnum>;
  subtitle: Scalars['String'];
  title: Scalars['String'];
  userId: Scalars['ID'];
};

export type Collection = {
  __typename?: 'Collection';
  id: Scalars['ID'];
  kind: CollectionKindEnum;
  name: Maybe<Scalars['String']>;
  userId: Scalars['ID'];
};

export enum CollectionKindEnum {
  Custom = 'custom',
  Personal = 'personal',
}

/** Autogenerated return type of CreateEmail */
export type CreateEmailPayload = {
  __typename?: 'CreateEmailPayload';
  email: Maybe<Email>;
  errors: Maybe<Scalars['JSON']>;
  status: Maybe<Status>;
};

/** Autogenerated return type of CreatePhone */
export type CreatePhonePayload = {
  __typename?: 'CreatePhonePayload';
  errors: Maybe<Scalars['JSON']>;
  phone: Maybe<Phone>;
  status: Maybe<Status>;
};

/** Autogenerated return type of DeleteBusinessCard */
export type DeleteBusinessCardPayload = {
  __typename?: 'DeleteBusinessCardPayload';
  businessCard: Maybe<BusinessCard>;
  errors: Maybe<Scalars['JSON']>;
  status: Maybe<Status>;
};

export type Email = {
  __typename?: 'Email';
  email: Scalars['String'];
  id: Scalars['ID'];
  isPrimary: Scalars['Boolean'];
  verificationStatus: VerificationStatusEnum;
};

export type Mutation = {
  __typename?: 'Mutation';
  addBusinessCardsToCollection: Maybe<Scalars['Boolean']>;
  createEmail: Maybe<CreateEmailPayload>;
  createPhone: Maybe<CreatePhonePayload>;
  deleteBusinessCard: Maybe<DeleteBusinessCardPayload>;
  removeBusinessCardsFromCollection: Maybe<Scalars['Boolean']>;
  signinUser: Maybe<SigninUserPayload>;
  signupUser: Maybe<SignupUserPayload>;
  upsertBusinessCard: Maybe<UpsertBusinessCardPayload>;
  upsertPassport: Maybe<UpsertPassportPayload>;
};

export type MutationAddBusinessCardsToCollectionArgs = {
  businessCardIds: Array<Scalars['ID']>;
  collectionId: Scalars['ID'];
};

export type MutationCreateEmailArgs = {
  email: Scalars['String'];
};

export type MutationCreatePhoneArgs = {
  number: Scalars['String'];
};

export type MutationDeleteBusinessCardArgs = {
  id: Scalars['ID'];
};

export type MutationRemoveBusinessCardsFromCollectionArgs = {
  businessCardIds: Array<Scalars['ID']>;
  collectionId: Scalars['ID'];
};

export type MutationSigninUserArgs = {
  email: Scalars['String'];
  password: Scalars['String'];
};

export type MutationSignupUserArgs = {
  email: Scalars['String'];
  password: Scalars['String'];
};

export type MutationUpsertBusinessCardArgs = {
  address?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  emails: Array<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  phones: Array<Scalars['String']>;
  status?: InputMaybe<PublicationStatusEnum>;
  subtitle: Scalars['String'];
  title: Scalars['String'];
};

export type MutationUpsertPassportArgs = {
  code: Scalars['String'];
  firstName: Scalars['String'];
  image: Scalars['Upload'];
  lastName: Scalars['String'];
  middleName: Scalars['String'];
  number: Scalars['String'];
};

export type Passport = {
  __typename?: 'Passport';
  code: Scalars['String'];
  firstName: Scalars['String'];
  id: Scalars['ID'];
  image: Maybe<Attachment>;
  lastName: Scalars['String'];
  middleName: Scalars['String'];
  number: Scalars['String'];
  userId: Scalars['ID'];
  verificationStatus: VerificationStatusEnum;
};

export type Phone = {
  __typename?: 'Phone';
  id: Scalars['ID'];
  isPrimary: Scalars['Boolean'];
  number: Scalars['String'];
  verificationStatus: VerificationStatusEnum;
};

export enum PublicationStatusEnum {
  Draft = 'draft',
  Published = 'published',
}

export type Query = {
  __typename?: 'Query';
  businessCard: Maybe<BusinessCard>;
  businessCards: Array<BusinessCard>;
  collections: Array<Collection>;
  passport: Maybe<Passport>;
  user: Maybe<User>;
};

export type QueryBusinessCardArgs = {
  id: Scalars['ID'];
};

export type QueryBusinessCardsArgs = {
  collectionIds?: InputMaybe<Array<Scalars['ID']>>;
  userId?: InputMaybe<Scalars['ID']>;
};

export type QueryCollectionsArgs = {
  kind?: InputMaybe<CollectionKindEnum>;
  userId: Scalars['ID'];
};

export type QueryPassportArgs = {
  userId: Scalars['ID'];
};

export type QueryUserArgs = {
  userId: Scalars['ID'];
};

/** Autogenerated return type of SigninUser */
export type SigninUserPayload = {
  __typename?: 'SigninUserPayload';
  errors: Maybe<Scalars['JSON']>;
  token: Maybe<Scalars['String']>;
  user: Maybe<User>;
};

/** Autogenerated return type of SignupUser */
export type SignupUserPayload = {
  __typename?: 'SignupUserPayload';
  errors: Maybe<Scalars['JSON']>;
  token: Maybe<Scalars['String']>;
  user: Maybe<User>;
};

export enum Status {
  Failure = 'failure',
  Success = 'success',
}

/** Autogenerated return type of UpsertBusinessCard */
export type UpsertBusinessCardPayload = {
  __typename?: 'UpsertBusinessCardPayload';
  businessCard: Maybe<BusinessCard>;
  errors: Maybe<Scalars['JSON']>;
  status: Maybe<Status>;
};

/** Autogenerated return type of UpsertPassport */
export type UpsertPassportPayload = {
  __typename?: 'UpsertPassportPayload';
  errors: Maybe<Scalars['JSON']>;
  passport: Maybe<Passport>;
  status: Maybe<Status>;
};

export type User = {
  __typename?: 'User';
  collections: Array<Collection>;
  emails: Array<Email>;
  id: Scalars['ID'];
  passport: Maybe<Passport>;
  phones: Array<Phone>;
};

export enum VerificationStatusEnum {
  Failed = 'failed',
  InProgress = 'in_progress',
  Succeeded = 'succeeded',
}

export type SigninUserMutationVariables = Exact<{
  email: Scalars['String'];
  password: Scalars['String'];
}>;

export type SigninUserMutation = {
  __typename?: 'Mutation';
  signinUser: {
    __typename?: 'SigninUserPayload';
    token: string | null;
    errors: any | null;
    user: {
      __typename?: 'User';
      id: string;
      emails: Array<{ __typename?: 'Email'; id: string; email: string }>;
    } | null;
  } | null;
};

export type SignupUserMutationVariables = Exact<{
  email: Scalars['String'];
  password: Scalars['String'];
}>;

export type SignupUserMutation = {
  __typename?: 'Mutation';
  signupUser: {
    __typename?: 'SignupUserPayload';
    token: string | null;
    errors: any | null;
    user: {
      __typename?: 'User';
      id: string;
      emails: Array<{ __typename?: 'Email'; id: string; email: string }>;
    } | null;
  } | null;
};

export type AddToCollectionMutationVariables = Exact<{
  collectionId: Scalars['ID'];
  businessCardIds: Array<Scalars['ID']> | Scalars['ID'];
}>;

export type AddToCollectionMutation = { __typename?: 'Mutation'; addBusinessCardsToCollection: boolean | null };

export type DeleteBusinessCardMutationVariables = Exact<{
  id: Scalars['ID'];
}>;

export type DeleteBusinessCardMutation = {
  __typename?: 'Mutation';
  deleteBusinessCard: {
    __typename?: 'DeleteBusinessCardPayload';
    status: Status | null;
    errors: any | null;
    businessCard: {
      __typename?: 'BusinessCard';
      id: string;
      userId: string;
      title: string;
      subtitle: string;
      description: string | null;
      address: string | null;
      status: PublicationStatusEnum | null;
      phones: Array<{
        __typename?: 'Phone';
        id: string;
        number: string;
        isPrimary: boolean;
        verificationStatus: VerificationStatusEnum;
      }>;
      emails: Array<{
        __typename?: 'Email';
        id: string;
        email: string;
        isPrimary: boolean;
        verificationStatus: VerificationStatusEnum;
      }>;
    } | null;
  } | null;
};

export type GetBusinessCardsQueryVariables = Exact<{
  userId?: InputMaybe<Scalars['ID']>;
  collectionIds?: InputMaybe<Array<Scalars['ID']> | Scalars['ID']>;
}>;

export type GetBusinessCardsQuery = {
  __typename?: 'Query';
  businessCards: Array<{
    __typename?: 'BusinessCard';
    id: string;
    userId: string;
    title: string;
    subtitle: string;
    description: string | null;
    address: string | null;
    status: PublicationStatusEnum | null;
    phones: Array<{
      __typename?: 'Phone';
      id: string;
      number: string;
      isPrimary: boolean;
      verificationStatus: VerificationStatusEnum;
    }>;
    emails: Array<{
      __typename?: 'Email';
      id: string;
      email: string;
      isPrimary: boolean;
      verificationStatus: VerificationStatusEnum;
    }>;
  }>;
};

export type RemoveFromCollectionMutationVariables = Exact<{
  collectionId: Scalars['ID'];
  businessCardIds: Array<Scalars['ID']> | Scalars['ID'];
}>;

export type RemoveFromCollectionMutation = {
  __typename?: 'Mutation';
  removeBusinessCardsFromCollection: boolean | null;
};

export type ShowBusinessCardQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type ShowBusinessCardQuery = {
  __typename?: 'Query';
  businessCard: {
    __typename?: 'BusinessCard';
    id: string;
    userId: string;
    title: string;
    subtitle: string;
    description: string | null;
    address: string | null;
    status: PublicationStatusEnum | null;
    phones: Array<{
      __typename?: 'Phone';
      id: string;
      number: string;
      isPrimary: boolean;
      verificationStatus: VerificationStatusEnum;
    }>;
    emails: Array<{
      __typename?: 'Email';
      id: string;
      email: string;
      isPrimary: boolean;
      verificationStatus: VerificationStatusEnum;
    }>;
  } | null;
};

export type UpsertBusinessCardMutationVariables = Exact<{
  id?: InputMaybe<Scalars['ID']>;
  title: Scalars['String'];
  subtitle: Scalars['String'];
  description?: InputMaybe<Scalars['String']>;
  address?: InputMaybe<Scalars['String']>;
  status?: InputMaybe<PublicationStatusEnum>;
  phones: Array<Scalars['String']> | Scalars['String'];
  emails: Array<Scalars['String']> | Scalars['String'];
}>;

export type UpsertBusinessCardMutation = {
  __typename?: 'Mutation';
  upsertBusinessCard: {
    __typename?: 'UpsertBusinessCardPayload';
    status: Status | null;
    errors: any | null;
    businessCard: {
      __typename?: 'BusinessCard';
      id: string;
      userId: string;
      title: string;
      subtitle: string;
      description: string | null;
      address: string | null;
      status: PublicationStatusEnum | null;
      phones: Array<{
        __typename?: 'Phone';
        id: string;
        number: string;
        isPrimary: boolean;
        verificationStatus: VerificationStatusEnum;
      }>;
      emails: Array<{
        __typename?: 'Email';
        id: string;
        email: string;
        isPrimary: boolean;
        verificationStatus: VerificationStatusEnum;
      }>;
    } | null;
  } | null;
};

export type GetCollectionsQueryVariables = Exact<{
  userId: Scalars['ID'];
  kind?: InputMaybe<CollectionKindEnum>;
}>;

export type GetCollectionsQuery = {
  __typename?: 'Query';
  collections: Array<{
    __typename?: 'Collection';
    id: string;
    userId: string;
    name: string | null;
    kind: CollectionKindEnum;
  }>;
};

export type CreateEmailMutationVariables = Exact<{
  email: Scalars['String'];
}>;

export type CreateEmailMutation = {
  __typename?: 'Mutation';
  createEmail: {
    __typename?: 'CreateEmailPayload';
    status: Status | null;
    errors: any | null;
    email: {
      __typename?: 'Email';
      id: string;
      email: string;
      isPrimary: boolean;
      verificationStatus: VerificationStatusEnum;
    } | null;
  } | null;
};

export type BusinessCardFieldsFragment = {
  __typename?: 'BusinessCard';
  id: string;
  userId: string;
  title: string;
  subtitle: string;
  description: string | null;
  address: string | null;
  status: PublicationStatusEnum | null;
  phones: Array<{
    __typename?: 'Phone';
    id: string;
    number: string;
    isPrimary: boolean;
    verificationStatus: VerificationStatusEnum;
  }>;
  emails: Array<{
    __typename?: 'Email';
    id: string;
    email: string;
    isPrimary: boolean;
    verificationStatus: VerificationStatusEnum;
  }>;
};

export type CollectionFieldsFragment = {
  __typename?: 'Collection';
  id: string;
  userId: string;
  name: string | null;
  kind: CollectionKindEnum;
};

export type EmailFieldsFragment = {
  __typename?: 'Email';
  id: string;
  email: string;
  isPrimary: boolean;
  verificationStatus: VerificationStatusEnum;
};

export type PassportFieldsFragment = {
  __typename?: 'Passport';
  id: string;
  userId: string;
  firstName: string;
  lastName: string;
  middleName: string;
  code: string;
  number: string;
  verificationStatus: VerificationStatusEnum;
  image: { __typename?: 'Attachment'; url: string } | null;
};

export type PhoneFieldsFragment = {
  __typename?: 'Phone';
  id: string;
  number: string;
  isPrimary: boolean;
  verificationStatus: VerificationStatusEnum;
};

export type GetPassportQueryVariables = Exact<{
  userId: Scalars['ID'];
}>;

export type GetPassportQuery = {
  __typename?: 'Query';
  passport: {
    __typename?: 'Passport';
    id: string;
    userId: string;
    firstName: string;
    lastName: string;
    middleName: string;
    code: string;
    number: string;
    verificationStatus: VerificationStatusEnum;
    image: { __typename?: 'Attachment'; url: string } | null;
  } | null;
};

export type UpsertPassportMutationVariables = Exact<{
  firstName: Scalars['String'];
  lastName: Scalars['String'];
  middleName: Scalars['String'];
  code: Scalars['String'];
  number: Scalars['String'];
  image: Scalars['Upload'];
}>;

export type UpsertPassportMutation = {
  __typename?: 'Mutation';
  upsertPassport: {
    __typename?: 'UpsertPassportPayload';
    status: Status | null;
    errors: any | null;
    passport: {
      __typename?: 'Passport';
      id: string;
      userId: string;
      firstName: string;
      lastName: string;
      middleName: string;
      code: string;
      number: string;
      verificationStatus: VerificationStatusEnum;
      image: { __typename?: 'Attachment'; url: string } | null;
    } | null;
  } | null;
};

export type CreatePhoneMutationVariables = Exact<{
  number: Scalars['String'];
}>;

export type CreatePhoneMutation = {
  __typename?: 'Mutation';
  createPhone: {
    __typename?: 'CreatePhonePayload';
    status: Status | null;
    errors: any | null;
    phone: { __typename?: 'Phone'; id: string; number: string } | null;
  } | null;
};

export type GetUserQueryVariables = Exact<{
  userId: Scalars['ID'];
}>;

export type GetUserQuery = {
  __typename?: 'Query';
  user: {
    __typename?: 'User';
    id: string;
    emails: Array<{
      __typename?: 'Email';
      id: string;
      email: string;
      isPrimary: boolean;
      verificationStatus: VerificationStatusEnum;
    }>;
    phones: Array<{
      __typename?: 'Phone';
      id: string;
      number: string;
      isPrimary: boolean;
      verificationStatus: VerificationStatusEnum;
    }>;
    passport: {
      __typename?: 'Passport';
      id: string;
      userId: string;
      firstName: string;
      lastName: string;
      middleName: string;
      code: string;
      number: string;
      verificationStatus: VerificationStatusEnum;
      image: { __typename?: 'Attachment'; url: string } | null;
    } | null;
    collections: Array<{
      __typename?: 'Collection';
      id: string;
      userId: string;
      name: string | null;
      kind: CollectionKindEnum;
    }>;
  } | null;
};

export const PhoneFieldsFragmentDoc = gql`
  fragment PhoneFields on Phone {
    id
    number
    isPrimary
    verificationStatus
  }
`;
export const EmailFieldsFragmentDoc = gql`
  fragment EmailFields on Email {
    id
    email
    isPrimary
    verificationStatus
  }
`;
export const BusinessCardFieldsFragmentDoc = gql`
  fragment BusinessCardFields on BusinessCard {
    id
    userId
    title
    subtitle
    description
    address
    status
    phones {
      ...PhoneFields
    }
    emails {
      ...EmailFields
    }
  }
  ${PhoneFieldsFragmentDoc}
  ${EmailFieldsFragmentDoc}
`;
export const CollectionFieldsFragmentDoc = gql`
  fragment CollectionFields on Collection {
    id
    userId
    name
    kind
  }
`;
export const PassportFieldsFragmentDoc = gql`
  fragment PassportFields on Passport {
    id
    userId
    firstName
    lastName
    middleName
    code
    number
    verificationStatus
    image {
      url
    }
  }
`;
export const SigninUserDocument = gql`
  mutation SigninUser($email: String!, $password: String!) {
    signinUser(email: $email, password: $password) {
      user {
        id
        emails {
          id
          email
        }
      }
      token
      errors
    }
  }
`;
export type SigninUserMutationFn = Apollo.MutationFunction<SigninUserMutation, SigninUserMutationVariables>;

/**
 * __useSigninUserMutation__
 *
 * To run a mutation, you first call `useSigninUserMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSigninUserMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [signinUserMutation, { data, loading, error }] = useSigninUserMutation({
 *   variables: {
 *      email: // value for 'email'
 *      password: // value for 'password'
 *   },
 * });
 */
export function useSigninUserMutation(
  baseOptions?: Apollo.MutationHookOptions<SigninUserMutation, SigninUserMutationVariables>
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<SigninUserMutation, SigninUserMutationVariables>(SigninUserDocument, options);
}
export type SigninUserMutationHookResult = ReturnType<typeof useSigninUserMutation>;
export type SigninUserMutationResult = Apollo.MutationResult<SigninUserMutation>;
export type SigninUserMutationOptions = Apollo.BaseMutationOptions<SigninUserMutation, SigninUserMutationVariables>;
export const SignupUserDocument = gql`
  mutation SignupUser($email: String!, $password: String!) {
    signupUser(email: $email, password: $password) {
      user {
        id
        emails {
          id
          email
        }
      }
      token
      errors
    }
  }
`;
export type SignupUserMutationFn = Apollo.MutationFunction<SignupUserMutation, SignupUserMutationVariables>;

/**
 * __useSignupUserMutation__
 *
 * To run a mutation, you first call `useSignupUserMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSignupUserMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [signupUserMutation, { data, loading, error }] = useSignupUserMutation({
 *   variables: {
 *      email: // value for 'email'
 *      password: // value for 'password'
 *   },
 * });
 */
export function useSignupUserMutation(
  baseOptions?: Apollo.MutationHookOptions<SignupUserMutation, SignupUserMutationVariables>
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<SignupUserMutation, SignupUserMutationVariables>(SignupUserDocument, options);
}
export type SignupUserMutationHookResult = ReturnType<typeof useSignupUserMutation>;
export type SignupUserMutationResult = Apollo.MutationResult<SignupUserMutation>;
export type SignupUserMutationOptions = Apollo.BaseMutationOptions<SignupUserMutation, SignupUserMutationVariables>;
export const AddToCollectionDocument = gql`
  mutation AddToCollection($collectionId: ID!, $businessCardIds: [ID!]!) {
    addBusinessCardsToCollection(collectionId: $collectionId, businessCardIds: $businessCardIds)
  }
`;
export type AddToCollectionMutationFn = Apollo.MutationFunction<
  AddToCollectionMutation,
  AddToCollectionMutationVariables
>;

/**
 * __useAddToCollectionMutation__
 *
 * To run a mutation, you first call `useAddToCollectionMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useAddToCollectionMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [addToCollectionMutation, { data, loading, error }] = useAddToCollectionMutation({
 *   variables: {
 *      collectionId: // value for 'collectionId'
 *      businessCardIds: // value for 'businessCardIds'
 *   },
 * });
 */
export function useAddToCollectionMutation(
  baseOptions?: Apollo.MutationHookOptions<AddToCollectionMutation, AddToCollectionMutationVariables>
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<AddToCollectionMutation, AddToCollectionMutationVariables>(
    AddToCollectionDocument,
    options
  );
}
export type AddToCollectionMutationHookResult = ReturnType<typeof useAddToCollectionMutation>;
export type AddToCollectionMutationResult = Apollo.MutationResult<AddToCollectionMutation>;
export type AddToCollectionMutationOptions = Apollo.BaseMutationOptions<
  AddToCollectionMutation,
  AddToCollectionMutationVariables
>;
export const DeleteBusinessCardDocument = gql`
  mutation DeleteBusinessCard($id: ID!) {
    deleteBusinessCard(id: $id) {
      businessCard {
        ...BusinessCardFields
      }
      status
      errors
    }
  }
  ${BusinessCardFieldsFragmentDoc}
`;
export type DeleteBusinessCardMutationFn = Apollo.MutationFunction<
  DeleteBusinessCardMutation,
  DeleteBusinessCardMutationVariables
>;

/**
 * __useDeleteBusinessCardMutation__
 *
 * To run a mutation, you first call `useDeleteBusinessCardMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteBusinessCardMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteBusinessCardMutation, { data, loading, error }] = useDeleteBusinessCardMutation({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useDeleteBusinessCardMutation(
  baseOptions?: Apollo.MutationHookOptions<DeleteBusinessCardMutation, DeleteBusinessCardMutationVariables>
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<DeleteBusinessCardMutation, DeleteBusinessCardMutationVariables>(
    DeleteBusinessCardDocument,
    options
  );
}
export type DeleteBusinessCardMutationHookResult = ReturnType<typeof useDeleteBusinessCardMutation>;
export type DeleteBusinessCardMutationResult = Apollo.MutationResult<DeleteBusinessCardMutation>;
export type DeleteBusinessCardMutationOptions = Apollo.BaseMutationOptions<
  DeleteBusinessCardMutation,
  DeleteBusinessCardMutationVariables
>;
export const GetBusinessCardsDocument = gql`
  query GetBusinessCards($userId: ID, $collectionIds: [ID!]) {
    businessCards(userId: $userId, collectionIds: $collectionIds) {
      ...BusinessCardFields
    }
  }
  ${BusinessCardFieldsFragmentDoc}
`;

/**
 * __useGetBusinessCardsQuery__
 *
 * To run a query within a React component, call `useGetBusinessCardsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetBusinessCardsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetBusinessCardsQuery({
 *   variables: {
 *      userId: // value for 'userId'
 *      collectionIds: // value for 'collectionIds'
 *   },
 * });
 */
export function useGetBusinessCardsQuery(
  baseOptions?: Apollo.QueryHookOptions<GetBusinessCardsQuery, GetBusinessCardsQueryVariables>
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<GetBusinessCardsQuery, GetBusinessCardsQueryVariables>(GetBusinessCardsDocument, options);
}
export function useGetBusinessCardsLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<GetBusinessCardsQuery, GetBusinessCardsQueryVariables>
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<GetBusinessCardsQuery, GetBusinessCardsQueryVariables>(GetBusinessCardsDocument, options);
}
export type GetBusinessCardsQueryHookResult = ReturnType<typeof useGetBusinessCardsQuery>;
export type GetBusinessCardsLazyQueryHookResult = ReturnType<typeof useGetBusinessCardsLazyQuery>;
export type GetBusinessCardsQueryResult = Apollo.QueryResult<GetBusinessCardsQuery, GetBusinessCardsQueryVariables>;
export const RemoveFromCollectionDocument = gql`
  mutation RemoveFromCollection($collectionId: ID!, $businessCardIds: [ID!]!) {
    removeBusinessCardsFromCollection(collectionId: $collectionId, businessCardIds: $businessCardIds)
  }
`;
export type RemoveFromCollectionMutationFn = Apollo.MutationFunction<
  RemoveFromCollectionMutation,
  RemoveFromCollectionMutationVariables
>;

/**
 * __useRemoveFromCollectionMutation__
 *
 * To run a mutation, you first call `useRemoveFromCollectionMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useRemoveFromCollectionMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [removeFromCollectionMutation, { data, loading, error }] = useRemoveFromCollectionMutation({
 *   variables: {
 *      collectionId: // value for 'collectionId'
 *      businessCardIds: // value for 'businessCardIds'
 *   },
 * });
 */
export function useRemoveFromCollectionMutation(
  baseOptions?: Apollo.MutationHookOptions<RemoveFromCollectionMutation, RemoveFromCollectionMutationVariables>
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<RemoveFromCollectionMutation, RemoveFromCollectionMutationVariables>(
    RemoveFromCollectionDocument,
    options
  );
}
export type RemoveFromCollectionMutationHookResult = ReturnType<typeof useRemoveFromCollectionMutation>;
export type RemoveFromCollectionMutationResult = Apollo.MutationResult<RemoveFromCollectionMutation>;
export type RemoveFromCollectionMutationOptions = Apollo.BaseMutationOptions<
  RemoveFromCollectionMutation,
  RemoveFromCollectionMutationVariables
>;
export const ShowBusinessCardDocument = gql`
  query ShowBusinessCard($id: ID!) {
    businessCard(id: $id) {
      ...BusinessCardFields
    }
  }
  ${BusinessCardFieldsFragmentDoc}
`;

/**
 * __useShowBusinessCardQuery__
 *
 * To run a query within a React component, call `useShowBusinessCardQuery` and pass it any options that fit your needs.
 * When your component renders, `useShowBusinessCardQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useShowBusinessCardQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useShowBusinessCardQuery(
  baseOptions: Apollo.QueryHookOptions<ShowBusinessCardQuery, ShowBusinessCardQueryVariables>
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<ShowBusinessCardQuery, ShowBusinessCardQueryVariables>(ShowBusinessCardDocument, options);
}
export function useShowBusinessCardLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<ShowBusinessCardQuery, ShowBusinessCardQueryVariables>
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<ShowBusinessCardQuery, ShowBusinessCardQueryVariables>(ShowBusinessCardDocument, options);
}
export type ShowBusinessCardQueryHookResult = ReturnType<typeof useShowBusinessCardQuery>;
export type ShowBusinessCardLazyQueryHookResult = ReturnType<typeof useShowBusinessCardLazyQuery>;
export type ShowBusinessCardQueryResult = Apollo.QueryResult<ShowBusinessCardQuery, ShowBusinessCardQueryVariables>;
export const UpsertBusinessCardDocument = gql`
  mutation UpsertBusinessCard(
    $id: ID
    $title: String!
    $subtitle: String!
    $description: String
    $address: String
    $status: PublicationStatusEnum
    $phones: [String!]!
    $emails: [String!]!
  ) {
    upsertBusinessCard(
      id: $id
      title: $title
      subtitle: $subtitle
      description: $description
      address: $address
      status: $status
      phones: $phones
      emails: $emails
    ) {
      businessCard {
        ...BusinessCardFields
      }
      status
      errors
    }
  }
  ${BusinessCardFieldsFragmentDoc}
`;
export type UpsertBusinessCardMutationFn = Apollo.MutationFunction<
  UpsertBusinessCardMutation,
  UpsertBusinessCardMutationVariables
>;

/**
 * __useUpsertBusinessCardMutation__
 *
 * To run a mutation, you first call `useUpsertBusinessCardMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpsertBusinessCardMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [upsertBusinessCardMutation, { data, loading, error }] = useUpsertBusinessCardMutation({
 *   variables: {
 *      id: // value for 'id'
 *      title: // value for 'title'
 *      subtitle: // value for 'subtitle'
 *      description: // value for 'description'
 *      address: // value for 'address'
 *      status: // value for 'status'
 *      phones: // value for 'phones'
 *      emails: // value for 'emails'
 *   },
 * });
 */
export function useUpsertBusinessCardMutation(
  baseOptions?: Apollo.MutationHookOptions<UpsertBusinessCardMutation, UpsertBusinessCardMutationVariables>
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<UpsertBusinessCardMutation, UpsertBusinessCardMutationVariables>(
    UpsertBusinessCardDocument,
    options
  );
}
export type UpsertBusinessCardMutationHookResult = ReturnType<typeof useUpsertBusinessCardMutation>;
export type UpsertBusinessCardMutationResult = Apollo.MutationResult<UpsertBusinessCardMutation>;
export type UpsertBusinessCardMutationOptions = Apollo.BaseMutationOptions<
  UpsertBusinessCardMutation,
  UpsertBusinessCardMutationVariables
>;
export const GetCollectionsDocument = gql`
  query GetCollections($userId: ID!, $kind: CollectionKindEnum) {
    collections(userId: $userId, kind: $kind) {
      ...CollectionFields
    }
  }
  ${CollectionFieldsFragmentDoc}
`;

/**
 * __useGetCollectionsQuery__
 *
 * To run a query within a React component, call `useGetCollectionsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCollectionsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCollectionsQuery({
 *   variables: {
 *      userId: // value for 'userId'
 *      kind: // value for 'kind'
 *   },
 * });
 */
export function useGetCollectionsQuery(
  baseOptions: Apollo.QueryHookOptions<GetCollectionsQuery, GetCollectionsQueryVariables>
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<GetCollectionsQuery, GetCollectionsQueryVariables>(GetCollectionsDocument, options);
}
export function useGetCollectionsLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<GetCollectionsQuery, GetCollectionsQueryVariables>
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<GetCollectionsQuery, GetCollectionsQueryVariables>(GetCollectionsDocument, options);
}
export type GetCollectionsQueryHookResult = ReturnType<typeof useGetCollectionsQuery>;
export type GetCollectionsLazyQueryHookResult = ReturnType<typeof useGetCollectionsLazyQuery>;
export type GetCollectionsQueryResult = Apollo.QueryResult<GetCollectionsQuery, GetCollectionsQueryVariables>;
export const CreateEmailDocument = gql`
  mutation CreateEmail($email: String!) {
    createEmail(email: $email) {
      email {
        ...EmailFields
      }
      status
      errors
    }
  }
  ${EmailFieldsFragmentDoc}
`;
export type CreateEmailMutationFn = Apollo.MutationFunction<CreateEmailMutation, CreateEmailMutationVariables>;

/**
 * __useCreateEmailMutation__
 *
 * To run a mutation, you first call `useCreateEmailMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateEmailMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createEmailMutation, { data, loading, error }] = useCreateEmailMutation({
 *   variables: {
 *      email: // value for 'email'
 *   },
 * });
 */
export function useCreateEmailMutation(
  baseOptions?: Apollo.MutationHookOptions<CreateEmailMutation, CreateEmailMutationVariables>
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<CreateEmailMutation, CreateEmailMutationVariables>(CreateEmailDocument, options);
}
export type CreateEmailMutationHookResult = ReturnType<typeof useCreateEmailMutation>;
export type CreateEmailMutationResult = Apollo.MutationResult<CreateEmailMutation>;
export type CreateEmailMutationOptions = Apollo.BaseMutationOptions<CreateEmailMutation, CreateEmailMutationVariables>;
export const GetPassportDocument = gql`
  query GetPassport($userId: ID!) {
    passport(userId: $userId) {
      id
      userId
      firstName
      lastName
      middleName
      code
      number
      verificationStatus
      image {
        url
      }
    }
  }
`;

/**
 * __useGetPassportQuery__
 *
 * To run a query within a React component, call `useGetPassportQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetPassportQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetPassportQuery({
 *   variables: {
 *      userId: // value for 'userId'
 *   },
 * });
 */
export function useGetPassportQuery(baseOptions: Apollo.QueryHookOptions<GetPassportQuery, GetPassportQueryVariables>) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<GetPassportQuery, GetPassportQueryVariables>(GetPassportDocument, options);
}
export function useGetPassportLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<GetPassportQuery, GetPassportQueryVariables>
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<GetPassportQuery, GetPassportQueryVariables>(GetPassportDocument, options);
}
export type GetPassportQueryHookResult = ReturnType<typeof useGetPassportQuery>;
export type GetPassportLazyQueryHookResult = ReturnType<typeof useGetPassportLazyQuery>;
export type GetPassportQueryResult = Apollo.QueryResult<GetPassportQuery, GetPassportQueryVariables>;
export const UpsertPassportDocument = gql`
  mutation UpsertPassport(
    $firstName: String!
    $lastName: String!
    $middleName: String!
    $code: String!
    $number: String!
    $image: Upload!
  ) {
    upsertPassport(
      firstName: $firstName
      lastName: $lastName
      middleName: $middleName
      code: $code
      number: $number
      image: $image
    ) {
      passport {
        id
        userId
        firstName
        lastName
        middleName
        code
        number
        verificationStatus
        image {
          url
        }
      }
      status
      errors
    }
  }
`;
export type UpsertPassportMutationFn = Apollo.MutationFunction<UpsertPassportMutation, UpsertPassportMutationVariables>;

/**
 * __useUpsertPassportMutation__
 *
 * To run a mutation, you first call `useUpsertPassportMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpsertPassportMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [upsertPassportMutation, { data, loading, error }] = useUpsertPassportMutation({
 *   variables: {
 *      firstName: // value for 'firstName'
 *      lastName: // value for 'lastName'
 *      middleName: // value for 'middleName'
 *      code: // value for 'code'
 *      number: // value for 'number'
 *      image: // value for 'image'
 *   },
 * });
 */
export function useUpsertPassportMutation(
  baseOptions?: Apollo.MutationHookOptions<UpsertPassportMutation, UpsertPassportMutationVariables>
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<UpsertPassportMutation, UpsertPassportMutationVariables>(UpsertPassportDocument, options);
}
export type UpsertPassportMutationHookResult = ReturnType<typeof useUpsertPassportMutation>;
export type UpsertPassportMutationResult = Apollo.MutationResult<UpsertPassportMutation>;
export type UpsertPassportMutationOptions = Apollo.BaseMutationOptions<
  UpsertPassportMutation,
  UpsertPassportMutationVariables
>;
export const CreatePhoneDocument = gql`
  mutation CreatePhone($number: String!) {
    createPhone(number: $number) {
      phone {
        id
        number
      }
      status
      errors
    }
  }
`;
export type CreatePhoneMutationFn = Apollo.MutationFunction<CreatePhoneMutation, CreatePhoneMutationVariables>;

/**
 * __useCreatePhoneMutation__
 *
 * To run a mutation, you first call `useCreatePhoneMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreatePhoneMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createPhoneMutation, { data, loading, error }] = useCreatePhoneMutation({
 *   variables: {
 *      number: // value for 'number'
 *   },
 * });
 */
export function useCreatePhoneMutation(
  baseOptions?: Apollo.MutationHookOptions<CreatePhoneMutation, CreatePhoneMutationVariables>
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<CreatePhoneMutation, CreatePhoneMutationVariables>(CreatePhoneDocument, options);
}
export type CreatePhoneMutationHookResult = ReturnType<typeof useCreatePhoneMutation>;
export type CreatePhoneMutationResult = Apollo.MutationResult<CreatePhoneMutation>;
export type CreatePhoneMutationOptions = Apollo.BaseMutationOptions<CreatePhoneMutation, CreatePhoneMutationVariables>;
export const GetUserDocument = gql`
  query GetUser($userId: ID!) {
    user(userId: $userId) {
      id
      emails {
        ...EmailFields
      }
      phones {
        ...PhoneFields
      }
      passport {
        ...PassportFields
      }
      collections {
        ...CollectionFields
      }
    }
  }
  ${EmailFieldsFragmentDoc}
  ${PhoneFieldsFragmentDoc}
  ${PassportFieldsFragmentDoc}
  ${CollectionFieldsFragmentDoc}
`;

/**
 * __useGetUserQuery__
 *
 * To run a query within a React component, call `useGetUserQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetUserQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetUserQuery({
 *   variables: {
 *      userId: // value for 'userId'
 *   },
 * });
 */
export function useGetUserQuery(baseOptions: Apollo.QueryHookOptions<GetUserQuery, GetUserQueryVariables>) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<GetUserQuery, GetUserQueryVariables>(GetUserDocument, options);
}
export function useGetUserLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetUserQuery, GetUserQueryVariables>) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<GetUserQuery, GetUserQueryVariables>(GetUserDocument, options);
}
export type GetUserQueryHookResult = ReturnType<typeof useGetUserQuery>;
export type GetUserLazyQueryHookResult = ReturnType<typeof useGetUserLazyQuery>;
export type GetUserQueryResult = Apollo.QueryResult<GetUserQuery, GetUserQueryVariables>;
