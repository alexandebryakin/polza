# Stage 0, "build-stage", based on Node.js, to build and compile the frontend
# FROM tiangolo/node-frontend:10 as build-stage
# WORKDIR /app
# COPY package*.json /app/
# COPY yarn.lock /app/
# RUN yarn install
# COPY ./ /app/
# RUN yarn build
# # Stage 1, based on Nginx, to have only the compiled app, ready for production with Nginx
# FROM nginx:1.15
# COPY --from=build-stage /app/build/ /usr/share/nginx/html
# # Copy the default nginx.conf provided by tiangolo/node-frontend
# COPY --from=build-stage /nginx.conf /etc/nginx/conf.d/default.conf


# [TAKEN FROM]: https://github.com/tiangolo/node-frontend/blob/master/Dockerfile
FROM node:16-alpine as build-stage
# Puppeteer dependencies, from: https://github.com/GoogleChrome/puppeteer/blob/master/docs/troubleshooting.md#running-puppeteer-in-docker

# Install latest chrome dev package and fonts to support major charsets (Chinese, Japanese, Arabic, Hebrew, Thai and a few others)
# Note: this installs the necessary libs to make the bundled version of Chromium that Puppeteer
# installs, work.
# RUN apt-get update && apt-get install -y wget --no-install-recommends \
#     && wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add - \
#     && sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google.list' \
#     && apt-get update \
    # && apt-get install -y google-chrome-unstable fonts-ipafont-gothic fonts-wqy-zenhei fonts-thai-tlwg fonts-kacst ttf-freefont \
    #   --no-install-recommends \
    # && rm -rf /var/lib/apt/lists/* \
    # && apt-get purge --auto-remove -y curl \
    # && rm -rf /src/*.deb

# RUN apk update && apk add 
# RUN apt-get -y update
# RUN apt-get -y install git yarn
RUN apk update && \
    apk add yarn && \
    rm -rf /var/cache/apk/* && \
    rm -rf /tmp/*

WORKDIR /app

# RUN git clone https://github.com/alexandebryakin/polza.git
# WORKDIR /polza

COPY . .

# RUN npm install puppeteer

COPY ./docker/nginx.conf /nginx.conf

# COPY package*.json /app/
# COPY yarn.lock /app/
RUN yarn install
# COPY ./ /app/
RUN yarn build:prod

# ENV NODE_ENV production

# EXPOSE 3000

# Stage 1, based on Nginx, to have only the compiled app, ready for production with Nginx
FROM nginx:1.15
COPY --from=build-stage /app/build/ /usr/share/nginx/html
# Copy the default nginx.conf provided by tiangolo/node-frontend
COPY --from=build-stage /nginx.conf /etc/nginx/conf.d/default.conf

# [BUILD IMAGE]:
# docker build -t weuse-production -f ./docker/Dockerfile.production .

# [RUN IMAGE]:
# docker run -p 80:80 weuse-production
#               ^^:^^
#  machine's host : container's host